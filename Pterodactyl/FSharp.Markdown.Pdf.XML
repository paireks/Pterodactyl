<?xml version="1.0" encoding="utf-8"?>
<doc>
<assembly><name>FSharp.Markdown.Pdf</name></assembly>
<members>
<member name="T:AssemblyInfo">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:FSharp.Markdown.Pdf.MarkdownPdf.Write(FSharp.Markdown.MarkdownDocument,System.IO.Stream)">
<summary>
 Transform the provided Markdown document into PDF. The result will be 
 written to the provided stream.
</summary>
</member>
<member name="M:FSharp.Markdown.Pdf.MarkdownPdf.Write(FSharp.Markdown.MarkdownDocument,System.String)">
<summary>
 Transform the provided Markdown document into PDF. The result will be 
 written to the provided output path.
</summary>
</member>
<member name="M:FSharp.Markdown.Pdf.MarkdownPdf.Transform(System.String,System.IO.Stream)">
<summary>
 Transform Markdown document into PDF. The result will be written to the
 provided stream.
</summary>
</member>
<member name="M:FSharp.Markdown.Pdf.MarkdownPdf.Transform(System.String,System.String)">
<summary>
 Transform Markdown document into PDF. The result will be written to the 
 provided output path.
</summary>
</member>
<member name="T:FSharp.Markdown.Pdf.MarkdownPdf">
<summary>
 Type akin to Markdown to expose the above static extension methods so that they&apos;re visible in C#
 since the extension methods defined with &apos;type XXX with&apos; in F# are not visible in C#
</summary>
</member>
<member name="">

</member>
<member name="M:FSharp.Markdown.Pdf.MarkdownExt.Markdown.WritePdf.Static(FSharp.Markdown.MarkdownDocument,System.IO.Stream)">
<summary>
 Transform the provided Markdown document into PDF. The result will be 
 written to the provided stream.
</summary>
</member>
<member name="M:FSharp.Markdown.Pdf.MarkdownExt.Markdown.WritePdf.Static(FSharp.Markdown.MarkdownDocument,System.String)">
<summary>
 Transform the provided Markdown document into PDF. The result will be 
 written to the provided output path.
</summary>
</member>
<member name="M:FSharp.Markdown.Pdf.MarkdownExt.Markdown.TransformPdf.Static(System.String,System.IO.Stream)">
<summary>
 Transform Markdown document into PDF. The result will be written to the
 provided stream.
</summary>
</member>
<member name="M:FSharp.Markdown.Pdf.MarkdownExt.Markdown.TransformPdf.Static(System.String,System.String)">
<summary>
 Transform Markdown document into PDF. The result will be written to the 
 provided output path.
</summary>
</member>
<member name="T:FSharp.Markdown.Pdf.MarkdownExt">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FSharp.Markdown.Pdf.MarkdownStyleNames">
<summary>
 Constant style names so that the user has the option to provide his own styling
 for a given PDF document
</summary>
</member>
<member name="M:FSharp.Markdown.Pdf.PdfFormatting.formatMarkdown(MigraDoc.DocumentObjectModel.Document,System.Collections.Generic.IDictionary{System.String,System.Tuple{System.String,Microsoft.FSharp.Core.FSharpOption{System.String}}},Microsoft.FSharp.Collections.FSharpList{FSharp.Markdown.MarkdownParagraph})">
<summary>
 function to format a set of reference links and the tokenized Markdown document into
 a PdfDocument value using the Document value specified (which can contain style 
 overrides for all the styles listed in MarkdownStyleNames).
</summary>
</member>
<member name="T:FSharp.Markdown.Pdf.PdfFormatting">

</member>
</members>
</doc>
